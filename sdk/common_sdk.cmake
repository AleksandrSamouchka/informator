#if (NOT VERSION)
#    set(VERSION 0.7.2)
#endif()
#
if (NOT common_sdk_included)
    ## что бы не случилось посвторного включения
function(reset VAR_NAME AS_VALUE)
    set(${VAR_NAME}_old ${${VAR_NAME}} PARENT_SCOPE)
    set(${VAR_NAME} ${${AS_VALUE}} PARENT_SCOPE)
endfunction()

function(restore VAR_NAME)
    if (${VAR_NAME}_old)
        set(${VAR_NAME} ${${VAR_NAME}_old} PARENT_SCOPE)
        unset(${VAR_NAME}_old PARENT_SCOPE)
    endif()
endfunction()

function(setup_app_version)
    if (NOT VERSION)
        file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_PROJECT_NAME}.pro StrVer REGEX "VERSION")
        string(REGEX MATCH [0-9]+\\.[0-9]+\\.[0-9]+ VERSION ${StrVer})
    endif()
    set(APP_VERSION ${VERSION} PARENT_SCOPE)
    execute_process(COMMAND git rev-parse --short HEAD WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE REVISION)
    string(STRIP ${REVISION} REVISION)
    set(APP_REVISION ${REVISION} PARENT_SCOPE)
    message("building ${CMAKE_PROJECT_NAME} ${VERSION} ${REVISION}")
endfunction()

function(setup_by PrjFile)
    string(FIND ${PrjFile} "/" LastSlash REVERSE)
    if (NOT -1 EQUAL LastSlash)
        string(SUBSTRING ${PrjFile} 0 ${LastSlash} PrjPath)
    endif()
    string(FIND ${PrjFile} ".." IsNotLocalPath REVERSE)
    file(STRINGS ${PrjFile} Sources ENCODING UTF-8)
    set(HEADERS ${HEADERS})
    set(SOURCES ${SOURCES})
    set(RESOURCES ${RESOURCES})
    foreach(Str IN ITEMS ${Sources})
        ###  пропускаем закоментированные строки
        string(REGEX MATCH "^ *#" Comment ${Str})
        if (Comment)
            continue()
        endif()
        ### обрезаем комменты в конце строки и удаляем закоментированные подстроки
        set(_Str ${Str})
        set(Str)
        foreach (_SubStr IN ITEMS ${_Str})
            string(REGEX MATCH "^ *#" Comment ${_SubStr})
            if (Comment)
                continue()
            endif()
            string(FIND ${_SubStr} "#" CommentStart)
            if ( -1 LESS ${CommentStart})
                string(SUBSTRING ${_SubStr} 0 ${CommentStart} __SubStr)
                list(APPEND Str ${__SubStr})
            else()
                list(APPEND Str ${_SubStr})
            endif()
        endforeach ()
        set(_Str)
        ### определяем начало блока, а если уже в блоке - скипаем
        string(REGEX MATCH "(} *else *{)|(})|({)" hasBlockDelimiter ${Str})
        string(REGEX MATCH "\\$\\$\\{[A-Za-z0-9_]+}" isVariable ${Str})
        if (block_level)
            if (isVariable)
                continue()
            endif()
            if (hasBlockDelimiter MATCHES "} *else *{")
                continue()
            elseif ( hasBlockDelimiter STREQUAL "}" )
                math(EXPR block_level ${block_level}-1)
                if ( "0" STREQUAL ${block_level})
                    set(block_level)
                endif()
                continue()
            elseif (hasBlockDelimiter STREQUAL "{")
                math(EXPR block_level ${block_level}+1)
                continue()
            else ()
                continue()
            endif()
        elseif(hasBlockDelimiter AND NOT isVariable)
            set(block_level 1)
            continue()
        endif()
        ### таки наконейц начинаем разбор полётов
        string(REGEX MATCH "(^ *include)|(^ *HEADERS)|(^ *SOURCES)|(^ *RESOURCES)|(^ *VERSION)|(^ *DEFINES)|(^ *QT)" StrPrefix ${Str})
        if (StrPrefix)
            string(STRIP ${StrPrefix} StrPrefix)
            if (${StrPrefix} STREQUAL "include")
                string(REGEX REPLACE "^ *include" "" IncPrj ${Str})
                string(REPLACE "(" "" IncPrj ${IncPrj})
                string(REPLACE ")" "" IncPrj ${IncPrj})
                string(STRIP ${IncPrj} IncPrj)
                string(REPLACE "$$PWD" "${CMAKE_CURRENT_SOURCE_DIR}" IncPrj ${IncPrj})
                if (PrjPath)
                    setup_by("${PrjPath}/${IncPrj}")
                else()
                    setup_by("${IncPrj}")
                endif ()
            elseif (${StrPrefix} STREQUAL "VERSION") # пока это только исходники, там - посмотрим
                string(REGEX MATCH [0-9]+\\.[0-9]+\\.[0-9]+ VERSION ${Str})
            elseif (${StrPrefix} STREQUAL "DEFINES")
                string(REGEX REPLACE "( +)|(\\+=)+|${StrPrefix}+" "" _substr ${Str})
                if (NOT ${_substr} MATCHES "(VERSION+)|(BUILD_NUM+)")
                    add_definitions(-D${_substr})
                endif()
            elseif(${StrPrefix} STREQUAL "QT")
                if (NOT ${Str} MATCHES " *-= *")
                    string(REGEX REPLACE "(^ *\\+=)+|${StrPrefix}+" "" _substr ${Str})
                    string(STRIP ${_substr} _substr)
                    string(REGEX REPLACE " +" ";" _substr ${_substr})
                    foreach(qtLibName IN ITEMS ${_substr})
                        string(CONCAT _LIBS_ ${_LIBS_} " " ${qtLibName})
                    endforeach()
                endif()
            elseif(-1 EQUAL IsNotLocalPath) # пока это только исходники, там - посмотрим
                foreach(_substr IN ITEMS ${Str})
                    string(REGEX REPLACE "( +)|(\\+=)+|(=)+|${StrPrefix}+" "" _substr ${_substr})
                    if (_substr)
                        string(REGEX MATCH "^ *#" Comment ${_substr})
                        if (Comment)
                            continue()
                        endif()
                        string(REGEX REPLACE " *\\$\\$PWD" "${CMAKE_CURRENT_SOURCE_DIR}" _substr ${_substr})
                        list(APPEND ${StrPrefix} ${_substr})
                    endif()
                endforeach()
            endif()
        endif()
    endforeach()
    if (HEADERS)
        set(HEADERS ${HEADERS} PARENT_SCOPE)
    endif()
    if(SOURCES)
        set(SOURCES ${SOURCES} PARENT_SCOPE)
    endif()
    if (RESOURCES)
        set(RESOURCES ${RESOURCES} PARENT_SCOPE)
    endif()
    if (VERSION)
        set(VERSION ${VERSION} PARENT_SCOPE)
    endif()
    if (_LIBS_)
        set(_LIBS_ ${_LIBS_} PARENT_SCOPE)
    endif()
    message("<${PrjFile}> was processed")
endfunction()

function(setup_by_qmake_project)
    set(HEADERS ${HEADERS})
    set(SOURCES ${SOURCES})
    set(RESOURCES ${RESOURCES})

    setup_by(${CMAKE_PROJECT_NAME}.pro)
    # prepare revision
    execute_process(COMMAND git rev-parse --short HEAD WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE REVISION)
    string(STRIP ${REVISION} REVISION)
    # prepare libs list
    string(STRIP ${_LIBS_} _LIBS_)
    string(REPLACE " " ";" _LIBS_ ${_LIBS_})
    list(REMOVE_DUPLICATES _LIBS_)
    message("${_LIBS_}")
    foreach(qtLibName IN ITEMS ${_LIBS_})
        if ("core" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Core)
        elseif("sql" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Sql)
        elseif("mqtt" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Mqtt)
        elseif("serialport" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::SerialPort)
        elseif("gui" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Gui)
        elseif("gui" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Gui)
        elseif("network" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Network)
        elseif("multimedia" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::Multimedia)
        elseif("dbus" STREQUAL ${qtLibName})
            list(APPEND LIBS Qt5::DBus)
        endif()
    endforeach()

    message("++++++++++++++++++++++++++++++++++++")
    message("version        ->> ${VERSION}")
    message("revision       ->> ${REVISION}")
    message("headers        ->> ${HEADERS}")
    message("sources        ->> ${SOURCES}")
    message("resources      ->> ${RESOURCES}")
    message("link libraries ->> ${LIBS}")

    set(VERSION ${VERSION} PARENT_SCOPE)
    set(REVISION ${REVISION} PARENT_SCOPE)
    set(SOURCES ${SOURCES} PARENT_SCOPE)
    set(HEADERS ${HEADERS} PARENT_SCOPE)
    set(RESOURCES ${RESOURCES} PARENT_SCOPE)
    set(LIBS ${LIBS} PARENT_SCOPE)
endfunction()

function(print_sources)
    message(SOURCES)
    foreach(FileName IN ITEMS ${SOURCES})
        message("${FileName}")
    endforeach()
    message(HEADERS)
    foreach(FileName IN ITEMS ${HEADERS})
        message("${FileName}")
    endforeach()
    message(RESOURCES)
    foreach(FileName IN ITEMS ${RESOURCES})
        message("${FileName}")
    endforeach()
endfunction()

function(find_mntconti_sdk)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY_old ${CMAKE_FIND_ROOT_PATH_MODE_LIBRARY})
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
    set(_SDK_LIB_PATH_  ${CMAKE_BINARY_DIR}/../sdk)
    if (MNTCONTI_SDK_LIB_DIR)
        set(_SDK_LIB_PATH_ ${MNTCONTI_SDK_LIB_DIR})
    else ()
        message("MNTCONTI_SDK_LIB_DIR not set! ${_SDK_LIB_PATH_} will be used")
    endif ()
    find_library(MNTCONTI_SDK_ NAMES sdk libsdk HINTS  "${_SDK_LIB_PATH_}")
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ${CMAKE_FIND_ROOT_PATH_MODE_LIBRARY_old})
    set(MNTCONTI_SDK ${MNTCONTI_SDK_} PARENT_SCOPE)
endfunction()

set(SOURCES)
set(HEADERS)
set(RESOURCES)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(${APPLE})
    set(Qt5_DIR /Users/gri/Qt/5.9.8/clang_64/lib/cmake/Qt5)
elseif(${POKY})
    message("BK build")
elseif(${UNIX})
    set(Qt5_DIR /opt/Qt/5.9.8/gcc_64/lib/cmake/Qt5)
endif()

find_package(Qt5 REQUIRED QUIET COMPONENTS Core Sql Network Mqtt SerialPort Gui Widgets Multimedia DBus)
set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}" PROPERTY Qt5Core_VERSION_MAJOR "${Qt5Core_VERSION_MAJOR}")
set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}" PROPERTY Qt5Core_VERSION_MINOR "${Qt5Core_VERSION_MINOR}")

include_directories(. ${Qt5Core_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS})
set(common_sdk_included 1)
endif()