#ifndef CDIAGNOSTICENTRYINFO_H
#define CDIAGNOSTICENTRYINFO_H

/** ***********************************************************************
 * @class CDiagnosticEntryInfo
 * @brief Содержимое диагностического сообщения об одном параметре
 *
 * В поле name (указывается при создании) содержится наименование данного параметра.
 * Например: подключение к БД, опрос внешних сигналов, сбор имнформации о системе и прочее
 *
 * Логика состояния и статуса следующая:
 * 1. при запуске диагностики - состояние unknown, статус waiting
 * 2. если в процессе диагностики появляются предупреждения - состояние warning, статус waiting
 * 3. если в процессе диагностики появляются ошибки - состояние error, статус waiting
 * 4. если в процессе диагностики потребовались действия от оператора (водителя) - статус needAction
 * 5. если диагностика завершилась (установилось состояние) - статус ready
 *
 * В поле message можно устанавливать сообщения о:
 *  - предупреждениях
 *  - ошибках
 *  - действиях со стороны оператора
 *
 * @author Мальнев А
 * @date 24-01-2019
 ** ***********************************************************************/

#include <QtCore/QObject>
#include <QtCore/QJsonObject>

/** ***********************************************************************
 * @class CDiagnosticEntryInfo
 ** ***********************************************************************/
class CDiagnosticEntryInfo
{
public:
/** ***********************************************************************
 * @enum EState
 * @brief Список состояний
 ** ***********************************************************************/
    enum class EState
    {
        ok,         /*!< итоговое состояние без ошибок */
        error,      /*!< имеются ошибки, дальнейшая работа не возможна */
        warning,    /*!< имеются предупреждения, дальнейшая работа возможна */
        unknown,    /*!< итоговое состояние не определено */
    };
/** ***********************************************************************
 * @enum EStatus
 * @brief Список статусов
 ** ***********************************************************************/
    enum class EStatus
    {
        ready,      /*!< диагностика закончена, установившееся состояние */
        waiting,    /*!< диагностика в процессе, дополнительных действий не требуется */
        needAction, /*!< диагностика в процессе, нужны действия от оператора */
    };

public:
    CDiagnosticEntryInfo() = default;
/** ***********************************************************************
 * @fn CDiagnosticEntryInfo
 * @brief конструктор - использовать по умолчанию
 * @param QString       - наименование диагностируемого параметра
 ** ***********************************************************************/
    explicit CDiagnosticEntryInfo( const QString name, const QString humanName );
/** ***********************************************************************
 * @fn CDiagnosticEntryInfo
 * @brief конструктор - инициализация из принятого сообщения (для GUI)
 * @param QJsonObject
 ** ***********************************************************************/
    explicit CDiagnosticEntryInfo( const QJsonObject json );
/** ***********************************************************************
 * @fn CDiagnosticEntryInfo
 * @brief конструктор копирования
 * @param CDiagnosticEntryInfo &
 ** ***********************************************************************/
    CDiagnosticEntryInfo( const CDiagnosticEntryInfo & other ) = default;
/** ***********************************************************************
 * @fn prepareJson
 * @brief формирует JSON из имеющихся полей данных (используется в CTopicDiagnosticInfo)
 * @param none
 * @return QJsonObject
 ** ***********************************************************************/
    QJsonObject prepareJson() const;

public:
    EState mState{ EState::unknown };
    EStatus mStatus{ EStatus::waiting };
    QString mName{};
    QString mMessage{};
    QString mHumanName{};
};

#endif // CDIAGNOSTICENTRYINFO_H
